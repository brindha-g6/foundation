name: Build and Deploy to Optimizely DXP

env:
  BUILD_PATH: ${{ github.workspace }}/build
  USE_PUBLISH: true

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Node.js dependencies for SCSS with glob
        run: |
          cd src/Foundation/wwwroot/scss
          npm init -y
          npm install sass sass-glob

      - name: Compile SCSS to CSS with glob support
        run: |
          cd src/Foundation/wwwroot/scss
          npx sass --importer=node_modules/sass-glob/importer.js main.scss ../css/main.min.css --style=compressed

      - name: Restore .NET dependencies
        run: dotnet restore

      - name: Write MSBuild override to exclude duplicate module.config
        shell: pwsh
        run: |
          @"
          <Project>
            <ItemGroup>
              <Content Remove="modules\_protected\Geta.NotFoundHandler.Optimizely\module.config" />
            </ItemGroup>
          </Project>
          "@ | Out-File -FilePath "${{ github.workspace }}\ExcludeGetaConfig.targets" -Encoding utf8

      - name: Publish project
        if: env.USE_PUBLISH == 'true'
        shell: pwsh
        run: |
          $overridePath = Join-Path "${{ github.workspace }}" "ExcludeGetaConfig.targets"
          dotnet publish src/Foundation/Foundation.csproj `
            --configuration Release `
            --output "${{ env.BUILD_PATH }}" `
            /p:CustomAfterMicrosoftCommonTargets=$overridePath

      - name: Zip the published output
        shell: pwsh
        run: |
          $timestamp = Get-Date -Format "yyyyMMddHHmmss"
          $zipName = "foundation.cms.app.$timestamp.zip"
          Compress-Archive -Path "${{ env.BUILD_PATH }}\*" -DestinationPath $zipName
          echo "ZIP_NAME=$zipName" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Upload zipped artifact
        uses: actions/upload-artifact@v4
        with:
          name: foundation-cms-zip
          path: ${{ env.ZIP_NAME }}
