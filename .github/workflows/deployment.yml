name: Build and Deploy to Optimizely DXP

env:
  BUILD_PATH: ${{ github.workspace }}/build
  USE_PUBLISH: true

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Write MSBuild override to exclude duplicate module.config
        shell: pwsh
        run: |
          @"
          <Project>
            <ItemGroup>
              <Content Remove="modules\_protected\Geta.NotFoundHandler.Optimizely\module.config" />
            </ItemGroup>
          </Project>
          "@ | Out-File -FilePath "${{ github.workspace }}\ExcludeGetaConfig.targets" -Encoding utf8

      - name: Publish project
        if: env.USE_PUBLISH == 'true'
        shell: pwsh
        run: |
          $overridePath = Join-Path "${{ github.workspace }}" "ExcludeGetaConfig.targets"
          dotnet publish src/Foundation/Foundation.csproj `
            --configuration Release `
            --output "${{ env.BUILD_PATH }}" `
            /p:CustomAfterMicrosoftCommonTargets=$overridePath

      - name: Zip the published output
        shell: pwsh
        run: |
          $timestamp = Get-Date -Format "yyyyMMddHHmmss"
          $zipName = "foundation.cms.app.$timestamp.zip"
          Compress-Archive -Path "${{ env.BUILD_PATH }}\*" -DestinationPath $zipName
          echo "ZIP_NAME=$zipName" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Upload zipped artifact
        uses: actions/upload-artifact@v4
        with:
          name: foundation-cms-zip
          path: ${{ env.ZIP_NAME }}

  deploy:
    runs-on: windows-latest
    needs: build
    steps:
      - name: Download ZIP Artifact
        uses: actions/download-artifact@v4
        with:
          name: foundation-cms-zip
          path: .

      - name: Deploy to Optimizely DXP
        shell: pwsh
        run: |
          Install-Module -Name EPiCloud -Force -Scope CurrentUser -AllowClobber
          Import-Module EPiCloud
          Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass

          $clientKey = 'cHa5uGqiIBDGmIEtCycecyrZxktsUCNM0vjDqkk2vUrCLDtW'
          $clientSecret = 'NDm5kxcQ3dY4E1r3XEf7WDdK+ZOGZtcnxEpu0yoPsTu+Qtw1gWxqgcFpLLMwd45c'
          $projectId = '9e999a9a-6dac-47dc-9232-b2ed008f83ca'

          Connect-EpiCloud -ClientKey $clientKey -ClientSecret $clientSecret -ProjectId $projectId

          $zipFile = Get-ChildItem -Path . -Filter "foundation.cms.app.*.zip" | Select-Object -First 1
          if (-not $zipFile) {
            Write-Error "Deployment package not found."
            exit 1
          }

          Write-Host "Found ZIP file: $($zipFile.FullName)"
          $sasUrl = Get-EpiDeploymentPackageLocation -ProjectId $projectId

          $uploadedName = Add-EpiDeploymentPackage -SasUrl $sasUrl -Path $zipFile.FullName

          if (-not $uploadedName) {
            Write-Error "Upload failed. No package name returned."
            exit 1
          }

          Write-Host "Successfully uploaded: $uploadedName"

          $deployment = Start-EpiDeployment -DeploymentPackage $uploadedName -TargetEnvironment Integration -DirectDeploy
          Write-Host "Deployment started with ID: $($deployment.Id)"
